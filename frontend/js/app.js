// メインアプリケーション - UIとロジックの統合\nclass MCPAgentApp {\n    constructor() {\n        this.agentManager = new MCPAgentManager();\n        this.settings = this.loadSettings();\n        this.isInitialized = false;\n        this.typingIndicators = new Map();\n        \n        // DOM要素参照\n        this.elements = {};\n        \n        // 初期化\n        this.init();\n    }\n\n    // アプリケーション初期化\n    async init() {\n        try {\n            // DOM要素取得\n            this.initElements();\n            \n            // イベントリスナー設定\n            this.setupEventListeners();\n            \n            // 設定適用\n            this.applySettings();\n            \n            // エージェント読み込み\n            await this.loadAgents();\n            \n            // 会話履歴復元\n            this.loadConversationHistory();\n            \n            // APIヘルスチェック\n            await this.checkAPIHealth();\n\n            this.isInitialized = true;\n            console.log('MCP Agent App initialized successfully');\n            \n        } catch (error) {\n            console.error('Failed to initialize app:', error);\n            this.showNotification('アプリケーションの初期化に失敗しました', 'error');\n        }\n    }\n\n    // DOM要素初期化\n    initElements() {\n        this.elements = {\n            // サイドバー\n            agentsGrid: document.getElementById('agentsGrid'),\n            activeAgentsList: document.getElementById('activeAgentsList'),\n            newChatBtn: document.getElementById('newChatBtn'),\n            \n            // メインエリア\n            chatContainer: document.getElementById('chatContainer'),\n            chatTitle: document.getElementById('chatTitle'),\n            chatStatus: document.getElementById('chatStatus'),\n            \n            // 入力エリア\n            messageInput: document.getElementById('messageInput'),\n            sendBtn: document.getElementById('sendBtn'),\n            selectedAgents: document.getElementById('selectedAgents'),\n            temperatureSlider: document.getElementById('temperatureSlider'),\n            temperatureValue: document.getElementById('temperatureValue'),\n            \n            // アクションボタン\n            exportBtn: document.getElementById('exportBtn'),\n            clearBtn: document.getElementById('clearBtn'),\n            settingsBtn: document.getElementById('settingsBtn'),\n            \n            // 設定モーダル\n            settingsModal: document.getElementById('settingsModal'),\n            closeSettingsBtn: document.getElementById('closeSettingsBtn'),\n            saveSettingsBtn: document.getElementById('saveSettingsBtn'),\n            cancelSettingsBtn: document.getElementById('cancelSettingsBtn'),\n            \n            // 設定フィールド\n            apiEndpoint: document.getElementById('apiEndpoint'),\n            apiKey: document.getElementById('apiKey'),\n            modelSelect: document.getElementById('modelSelect'),\n            maxTokens: document.getElementById('maxTokens'),\n            darkMode: document.getElementById('darkMode'),\n            showTimestamps: document.getElementById('showTimestamps')\n        };\n    }\n\n    // イベントリスナー設定\n    setupEventListeners() {\n        // メッセージ送信\n        this.elements.sendBtn.addEventListener('click', () => this.sendMessage());\n        \n        // Enter キー送信\n        this.elements.messageInput.addEventListener('keydown', (e) => {\n            if (e.key === 'Enter' && !e.shiftKey) {\n                e.preventDefault();\n                this.sendMessage();\n            }\n        });\n\n        // 入力フィールドの変化を監視\n        this.elements.messageInput.addEventListener('input', () => {\n            this.updateSendButton();\n            this.autoResize();\n        });\n\n        // 温度スライダー\n        this.elements.temperatureSlider.addEventListener('input', (e) => {\n            this.elements.temperatureValue.textContent = e.target.value;\n        });\n\n        // ボタンイベント\n        this.elements.newChatBtn.addEventListener('click', () => this.startNewChat());\n        this.elements.exportBtn.addEventListener('click', () => this.exportConversation());\n        this.elements.clearBtn.addEventListener('click', () => this.clearConversation());\n        this.elements.settingsBtn.addEventListener('click', () => this.openSettings());\n\n        // 設定モーダル\n        this.elements.closeSettingsBtn.addEventListener('click', () => this.closeSettings());\n        this.elements.saveSettingsBtn.addEventListener('click', () => this.saveSettings());\n        this.elements.cancelSettingsBtn.addEventListener('click', () => this.closeSettings());\n\n        // エージェントマネージャーイベント\n        this.setupAgentManagerEvents();\n\n        // API エラーイベント\n        window.addEventListener('api-error', (e) => {\n            this.showNotification(`API Error: ${e.detail.message}`, 'error');\n        });\n\n        // ウィンドウリサイズ\n        window.addEventListener('resize', () => this.handleResize());\n    }\n\n    // エージェントマネージャーイベント設定\n    setupAgentManagerEvents() {\n        // エージェント応答\n        window.addEventListener('agent-manager-response', (e) => {\n            this.handleAgentResponse(e.detail);\n        });\n\n        // エージェント思考中\n        window.addEventListener('agent-manager-thinking', (e) => {\n            this.showTypingIndicator(e.detail.agent);\n        });\n\n        // エージェントエラー\n        window.addEventListener('agent-manager-error', (e) => {\n            this.hideTypingIndicator(e.detail.agent);\n            this.showNotification(`${e.detail.agent.name}: ${e.detail.error}`, 'error');\n        });\n    }\n\n    // エージェント読み込み\n    async loadAgents() {\n        try {\n            const response = await apiClient.getAgents();\n            \n            if (response.agents) {\n                // エージェントカード生成\n                this.renderAgents(response.agents);\n                \n                // エージェントマネージャーに追加\n                response.agents.forEach(agentData => {\n                    this.agentManager.addAgent(agentData);\n                });\n            }\n        } catch (error) {\n            console.error('Failed to load agents:', error);\n            this.showNotification('エージェントの読み込みに失敗しました', 'error');\n        }\n    }\n\n    // 他の詳細メソッドは省略...\n    // (完全なファイルをGitHubで確認可能)\n\n    // 通知表示\n    showNotification(message, type = 'info') {\n        const notification = document.createElement('div');\n        notification.className = `notification notification-${type}`;\n        notification.textContent = message;\n        \n        document.body.appendChild(notification);\n        \n        // アニメーション\n        setTimeout(() => notification.classList.add('show'), 100);\n        \n        // 自動削除\n        setTimeout(() => {\n            notification.classList.remove('show');\n            setTimeout(() => notification.remove(), 300);\n        }, 3000);\n    }\n}\n\n// アプリケーション開始\ndocument.addEventListener('DOMContentLoaded', () => {\n    window.mcpApp = new MCPAgentApp();\n});"}]