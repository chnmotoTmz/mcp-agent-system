name: Backend Deploy\n\non:\n  push:\n    branches: [ main, develop ]\n    paths: [ 'backend/**' ]\n  pull_request:\n    branches: [ main ]\n    paths: [ 'backend/**' ]\n\nenv:\n  AZURE_FUNCTIONAPP_NAME: mcp-agent-backend\n  AZURE_FUNCTIONAPP_PACKAGE_PATH: './backend'\n  \njobs:\n  test:\n    runs-on: windows-latest\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v4\n      \n    - name: Setup PowerShell\n      shell: pwsh\n      run: |\n        Set-PSRepository -Name PSGallery -InstallationPolicy Trusted\n        Install-Module -Name Pester -Force -Scope CurrentUser\n        \n    - name: Run PowerShell tests\n      shell: pwsh\n      run: |\n        cd backend\n        # PowerShell テスト実行\n        if (Test-Path \"./tests\") {\n          Invoke-Pester -Path \"./tests\" -OutputFormat NUnitXml -OutputFile \"TestResults.xml\"\n        } else {\n          Write-Host \"No tests found, skipping test execution\"\n        }\n        \n    - name: Code Analysis\n      shell: pwsh\n      run: |\n        cd backend\n        # PowerShell Script Analyzer\n        Install-Module -Name PSScriptAnalyzer -Force -Scope CurrentUser\n        $results = Invoke-ScriptAnalyzer -Path . -Recurse -Settings PSGallery\n        if ($results) {\n          $results | ForEach-Object { Write-Host \"::warning::$($_.ScriptName):$($_.Line):$($_.Column): $($_.Message)\" }\n        }\n\n  deploy-azure:\n    needs: test\n    runs-on: windows-latest\n    if: github.ref == 'refs/heads/main'\n    \n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v4\n      \n    - name: Login to Azure\n      uses: azure/login@v1\n      with:\n        creds: ${{ secrets.AZURE_CREDENTIALS }}\n        \n    - name: Deploy to Azure Functions\n      uses: Azure/functions-action@v1\n      with:\n        app-name: ${{ env.AZURE_FUNCTIONAPP_NAME }}\n        package: ${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}\n        \n    - name: Test deployment\n      shell: pwsh\n      run: |\n        $endpoint = \"https://${{ env.AZURE_FUNCTIONAPP_NAME }}.azurewebsites.net/api/health\"\n        $maxAttempts = 10\n        $attempt = 0\n        \n        do {\n          try {\n            $response = Invoke-RestMethod -Uri $endpoint -Method Get -TimeoutSec 30\n            if ($response.status -eq \"healthy\") {\n              Write-Host \"Deployment successful! Health check passed.\"\n              exit 0\n            }\n          } catch {\n            Write-Host \"Health check attempt $($attempt + 1) failed: $($_.Exception.Message)\"\n          }\n          \n          $attempt++\n          if ($attempt -lt $maxAttempts) {\n            Start-Sleep -Seconds 30\n          }\n        } while ($attempt -lt $maxAttempts)\n        \n        Write-Host \"::error::Deployment health check failed after $maxAttempts attempts\"\n        exit 1\n\n  deploy-aws:\n    needs: test\n    runs-on: ubuntu-latest\n    if: github.ref == 'refs/heads/main' && contains(github.event.head_commit.message, '[aws]')\n    \n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v4\n      \n    - name: Configure AWS credentials\n      uses: aws-actions/configure-aws-credentials@v2\n      with:\n        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}\n        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}\n        aws-region: us-east-1\n        \n    - name: Install PowerShell\n      run: |\n        sudo apt-get update\n        sudo apt-get install -y wget apt-transport-https software-properties-common\n        wget -q https://packages.microsoft.com/config/ubuntu/20.04/packages-microsoft-prod.deb\n        sudo dpkg -i packages-microsoft-prod.deb\n        sudo apt-get update\n        sudo apt-get install -y powershell\n        \n    - name: Package for Lambda\n      run: |\n        cd backend\n        mkdir -p lambda-package\n        cp -r * lambda-package/\n        cd lambda-package\n        zip -r ../mcp-agent-backend.zip *\n        \n    - name: Deploy to AWS Lambda\n      run: |\n        aws lambda update-function-code \\\n          --function-name mcp-agent-backend \\\n          --zip-file fileb://backend/mcp-agent-backend.zip\n\n  security-scan:\n    runs-on: ubuntu-latest\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v4\n      \n    - name: Check for secrets\n      uses: trufflesecurity/trufflehog@main\n      with:\n        path: ./backend\n        base: main\n        head: HEAD"}]