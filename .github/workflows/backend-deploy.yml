name: Deploy MCP Agent System - Gemini Edition

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  AZURE_WEBAPP_NAME: mcp-agent-gemini    # Azure Web App名
  AZURE_WEBAPP_PACKAGE_PATH: '.'        # アプリケーションパッケージパス
  NODE_VERSION: '18.x'                  # Node.jsバージョン
  POWERSHELL_VERSION: '7.x'             # PowerShellバージョン

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    name: Build and Test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Setup PowerShell
      uses: azure/powershell@v1
      with:
        azPSVersion: 'latest'
        inlineScript: |
          Write-Host "PowerShell環境確認完了"
          $PSVersionTable
    
    - name: Install dependencies
      run: |
        npm install --global npm@latest
        echo "依存関係のインストール完了"
    
    - name: Run frontend tests
      run: |
        echo "フロントエンドテスト実行中..."
        # JavaScriptファイルの構文チェック
        node -c frontend/js/app.js
        node -c frontend/js/api-client.js
        node -c frontend/js/mcp-agent.js
        echo "✅ フロントエンドテスト完了"
    
    - name: Validate PowerShell scripts
      shell: pwsh
      run: |
        Write-Host "PowerShellスクリプト検証中..."
        $script = Get-Content -Path "backend/api.ps1" -Raw
        $errors = $null
        $null = [System.Management.Automation.PSParser]::Tokenize($script, [ref]$errors)
        if ($errors.Count -gt 0) {
          Write-Error "PowerShellスクリプトにエラーがあります"
          $errors | ForEach-Object { Write-Error $_.Message }
          exit 1
        }
        Write-Host "✅ PowerShellスクリプト検証完了"
    
    - name: Security scan
      run: |
        echo "セキュリティスキャン実行中..."
        # 基本的なセキュリティチェック
        if grep -r "your_gemini_api_key_here" . --exclude-dir=.git; then
          echo "⚠️  警告: デフォルトAPIキーが検出されました"
        fi
        
        if grep -r "password" . --exclude-dir=.git --exclude="*.yml" --exclude="*.md"; then
          echo "ℹ️  パスワード関連のコードが検出されました（レビュー推奨）"
        fi
        
        echo "✅ セキュリティスキャン完了"
    
    - name: Build artifacts
      run: |
        echo "ビルドアーティファクト作成中..."
        mkdir -p dist
        cp -r frontend dist/
        cp -r backend dist/
        cp -r scripts dist/
        cp README.md dist/
        cp start-server.bat dist/
        echo "✅ ビルド完了"
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: mcp-agent-gemini-build
        path: dist/
        retention-days: 30

  deploy-azure:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    name: Deploy to Azure
    
    environment:
      name: 'Production'
      url: ${{ steps.deploy.outputs.webapp-url }}
    
    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v3
      with:
        name: mcp-agent-gemini-build
        path: ./deploy
    
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    - name: Deploy to Azure Web App
      id: deploy
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ env.AZURE_WEBAPP_NAME }}
        package: ./deploy
        
    - name: Configure App Settings
      uses: azure/appservice-settings@v1
      with:
        app-name: ${{ env.AZURE_WEBAPP_NAME }}
        app-settings-json: |
          [
            {
              "name": "GEMINI_API_KEY",
              "value": "${{ secrets.GEMINI_API_KEY }}",
              "slotSetting": false
            },
            {
              "name": "JWT_SECRET",
              "value": "${{ secrets.JWT_SECRET }}",
              "slotSetting": false
            },
            {
              "name": "ENVIRONMENT",
              "value": "production",
              "slotSetting": false
            }
          ]
    
    - name: Health Check
      run: |
        echo "デプロイ後ヘルスチェック実行中..."
        sleep 30
        
        HEALTH_URL="https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net/api/health"
        
        for i in {1..5}; do
          echo "ヘルスチェック試行 $i/5..."
          
          if curl -f -s "$HEALTH_URL" | grep -q "healthy"; then
            echo "✅ ヘルスチェック成功"
            echo "🚀 デプロイ完了: $HEALTH_URL"
            exit 0
          fi
          
          echo "⏳ 30秒待機..."
          sleep 30
        done
        
        echo "❌ ヘルスチェック失敗"
        exit 1

  deploy-notification:
    runs-on: ubuntu-latest
    needs: [build-and-test, deploy-azure]
    if: always()
    name: Deployment Notification
    
    steps:
    - name: Notify Success
      if: needs.deploy-azure.result == 'success'
      run: |
        echo "🎉 MCP Agent System (Gemini Edition) デプロイ成功!"
        echo "🌐 URL: https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net"
        echo "📊 ヘルスチェック: https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net/api/health"
        echo "🤖 Provider: Google Gemini Pro"
    
    - name: Notify Failure
      if: needs.build-and-test.result == 'failure' || needs.deploy-azure.result == 'failure'
      run: |
        echo "❌ デプロイ失敗"
        echo "📋 ログを確認してください"
        echo "🔧 修正後に再度プッシュしてください"